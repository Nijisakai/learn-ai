<html>

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, user-scalable=yes, initial-scale=1, maximum-scale=1">
  <meta name="description" content="Smart Device Camera Template for HTML, CSS, JS and WebRTC">
  <meta name="keywords" content="HTML,CSS,JavaScript, WebRTC, Camera">
  <meta name="author" content="Kasper Kamperman">
  <title></title>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script>

  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>

  <link rel="stylesheet" type="text/css" href="style.css">

  <script>
    //sample HTML/JS script that will publish/subscribe to topics in the Google Chrome Console
    //by Matthew Bordignon @bordignon on twitter.
    var wsbroker = "192.168.123.45";  //mqtt websocket enabled brokers
    var wsport = 1884; // or for above
    var client = new Paho.MQTT.Client(wsbroker, wsport,
      "myclientid_" + parseInt(Math.random() * 100, 10));
    client.onConnectionLost = function (responseObject) {
      console.log("connection lost: " + responseObject.errorMessage);
    };
    client.onMessageArrived = function (message) {
      console.log(message.destinationName, ' -- ', message.payloadString);
    };
    var options = {
      timeout: 3,
      userName: "mqttuser",
      password: "bnubnu",
      onSuccess: function () {
        console.log("mqtt connected");
        console.log(client.host + ":" + client.port)
        console.log(client)
        console.log('hahahahaha')
      },
      onFailure: function (message) {
        console.log("Connection failed: " + message.errorMessage);
      }
    };

    function init() {
      client.connect(options);
    }
    
    function publish(face1State,face2State) {
      var topic = "mytopic01";
      var qos = 0;
      var message1 = face1State;
      var message2 = face2State;
      var retain = false;
      // var shuoming = '????';
      // message = "{\"LED\":\"" + name1.innerHTML + message + "\"} ";
      // message = "{\"" + name1.innerHTML + "????\:" + message + "\"} ";
      message = "{\"list01\":\""+name1.innerHTML+"\",\"score01\":"+long1.innerHTML+",\"list02\":\""+name2.innerHTML+"\",\"score02\":"+long2.innerHTML+"}"
      // message = "{\"list01\":\"" + name1.innerHTML + "\"  \"score01\":\""+  message1 + "\" \n \"list02\":\"" + name2.innerHTML + "\"  \"score02\":\""+  message2 + "\"} ";

      logMessage("INFO", "Publishing Message: [Topic: ", topic, ", Payload: ", message, ", QoS: ", qos, ", Retain: ", retain, "]");
      message = new Paho.MQTT.Message(message);
      message.destinationName = topic;
      message.qos = Number(qos);
      message.retained = retain;
      client.send(message);
      console.log(message); 
    }
    
    function logMessage(type, ...content) {
 
      var date = new Date();
      var timeString = date.toUTCString();
      var logMessage = timeString + " - " + type + " - " + content.join("");
      console.log(logMessage);
    }

  </script>

  <script>

    const URL = "./my_model/";

    let model, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function initwebcam() {
      const modelURL = URL + "model.json";
      const metadataURL = URL + "metadata.json";

      // load the model and metadata
      // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
      // or files from your local hard drive
      // Note: the pose library adds "tmImage" object to your window (window.tmImage)
      model = await tmImage.load(modelURL, metadataURL);
      maxPredictions = model.getTotalClasses();

      labelContainer = document.getElementById("label-container");
      for (let i = 0; i < maxPredictions; i++) { // and class labels
        labelContainer.appendChild(document.createElement("div"));
      }

      window.requestAnimationFrame(loop);
    }

    async function loop() {
      await predict();
      window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model

    async function predict() {
      const name1 = document.getElementById("name1")
      const long1 = document.getElementById("long1")
      const name2 = document.getElementById("name2")
      const long2 = document.getElementById("long2")
      const prediction = await model.predict(video);
      for (let i = 0; i < maxPredictions; i++) {
        // const classPrediction =
        //   prediction[i].className + ": " + prediction[i].probability.toFixed(2);
        // labelContainer.childNodes[i].innerHTML = classPrediction;
        // console.log(classPrediction);
        name1.innerHTML = prediction[0].className
        name2.innerHTML = prediction[1].className
        long1.innerHTML = prediction[0].probability.toFixed(2)
        long2.innerHTML = prediction[1].probability.toFixed(2)
        long1.style.width = "calc(250px * " + prediction[0].probability.toFixed(2) + ")"
        long2.style.width = "calc(250px * " + prediction[1].probability.toFixed(2) + ")"
      }
    }

  </script>

</head>

<!-- <body onload="init();initwebcam()"> -->
<body onload="initwebcam()">
  <!-- <button type="button" onclick='publish(long1.innerHTML,long2.innerHTML)'>??</button> -->
  <div id="container">
    <div id="vid_container">
      <video id="video" autoplay playsinline></video>
      <div id="video_overlay"></div>
    </div>
    <div id="gui_controls">
      <button id="switchCameraButton" name="switch Camera" type="button" aria-pressed="false"></button>
      <button id="takePhotoButton" name="take Photo" type="button" onclick='publish(long1.innerHTML,long2.innerHTML)'></button>
      <button id="toggleFullScreenButton" name="toggle FullScreen" type="button" aria-pressed="false"></button>
      <div id="label-container">
        <div>
          <span id="name1" style="color: #d47b2b;"></span>
          <span style="background-color:#faede4; width:250px; display: inline-block;">
            <span id="long1" style="background-color:#d47b2b; display: inline-block;color: #fff;"></span>
          </span>
        </div>
        <div style="margin-top: 9px;">
          <span id="name2" style="color: #f67a90;"></span>
          <span style="background-color:#faede4; width:250px; display: inline-block;">
            <span id="long2" style="background-color:#f67a90; display: inline-block;color: #fff;"></span>
          </span>
        </div>
      </div>
    </div>
  </div>
  <script src="js/DetectRTC.min.js"></script>
  <script src="js/adapter.min.js"></script>
  <script src="js/screenfull.min.js"></script>
  <script src="js/howler.core.min.js"></script>
  <script src="js/main.js"></script>
</body>

</html>
